<UserControl x:Class="SyslabControlAlgorithmFrameworkWpfGui.View.AlgorithmsUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ViewModel="clr-namespace:SyslabControlAlgorithmFrameworkWpfGui.ViewModel"
             xmlns:ViewModelModel="clr-namespace:SyslabControlAlgorithmFrameworkWpfGui.ViewModel.Model"
             xmlns:Converter="clr-namespace:SyslabControlAlgorithmFrameworkWpfGui.View.Converters"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             mc:Ignorable="d" 
             d:DesignHeight="800" d:DesignWidth="800">
    <UserControl.DataContext>
        <ViewModel:AlgorithmsViewModel />
    </UserControl.DataContext>
    <UserControl.Resources>
        <Converter:BrushColorConverter x:Key="BConverter"/>
    </UserControl.Resources>
    <DockPanel>
        <UniformGrid DockPanel.Dock="Top" Rows="1">
            <GroupBox Header="Client Names">
                <ListView ItemsSource="{Binding Clients, IsAsync=True}" SelectedItem="{Binding SelectedClient, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ListView.Resources>
                        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsIsolated, IsAsync=True}" Value="False">
                                    <Setter Property="Foreground" Value="Green" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsIsolated, IsAsync=True}" Value="True">
                                    <Setter Property="Foreground" Value="Red" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        <DataTemplate DataType="{x:Type ViewModelModel:ClientVM}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding Path=., IsAsync=True}"/>
                                <UniformGrid Grid.Column="1" Rows="1">
                                    <Button Content="Isolate" Command="{Binding IsolateCommand, IsAsync=True}" Visibility="{Binding IsolateVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                    <Button Content="Unisolate" Command="{Binding UnisolateCommand, IsAsync=True}" Visibility="{Binding UnisolateVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                </UniformGrid>
                            </Grid>
                        </DataTemplate>
                    </ListView.Resources>
                </ListView>
            </GroupBox>
            <!--<GroupBox Header="Is Isolated">
                <UniformGrid Columns="1">
                    <Button Command="{Binding SwitchIsIsolatedCommand, IsAsync=True}" Content="Switch IsIsolated"/>
                </UniformGrid>
            </GroupBox>-->
            <GroupBox Header="Algorithm Names">
                <ListView x:Name="AlgorithmsListView" ItemsSource="{Binding Algorithms, IsAsync=True}" SelectedItem="{Binding SelectedAlgorithm, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ListView.Resources>
                        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding State, IsAsync=True}" Value="Running">
                                    <Setter Property="Foreground" Value="Green" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding State, IsAsync=True}" Value="Stopped">
                                    <Setter Property="Foreground" Value="Red" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding State, IsAsync=True}" Value="Paused">
                                    <Setter Property="Foreground" Value="Orange" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding State, IsAsync=True}" Value="Initial State">
                                    <Setter Property="Foreground" Value="Purple" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        <DataTemplate DataType="{x:Type ViewModelModel:AlgorithmVM}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding Path=., IsAsync=True}"/>
                                <UniformGrid Grid.Column="1" Rows="1">
                                    <Button Content="Start" Command="{Binding StartAlgorithmCommand, IsAsync=True}" Visibility="{Binding StartAlgorithmVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                    <Button Content="Stop" Command="{Binding StopAlgorithmCommand, IsAsync=True}" Visibility="{Binding StopAlgorithmVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                    <Button Content="Restart" Command="{Binding RestartAlgorithmCommand, IsAsync=True}" Visibility="{Binding RestartAlgorithmVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                    <Button Content="Pause" Command="{Binding PauseAlgorithmCommand, IsAsync=True}" Visibility="{Binding PauseAlgorithmVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                    <Button Content="Resume" Command="{Binding ResumeAlgorithmCommand, IsAsync=True}" Visibility="{Binding ResumeAlgorithmVisibility, IsAsync=True}" Style="{StaticResource AccentedSquareButtonStyle}"/>
                                </UniformGrid>
                            </Grid>
                        </DataTemplate>
                    </ListView.Resources>
                </ListView>
            </GroupBox>
        </UniformGrid>
        <!--<UniformGrid DockPanel.Dock="Top" Rows="1">
            <Button Content="Start Algorithm" Command="{Binding StartAlgorithmCommand, IsAsync=True}"/>
            <Button Content="Stop Algorithm" Command="{Binding StopAlgorithmCommand, IsAsync=True}"/>
            <Button Content="Restart Algorithm" Command="{Binding RestartAlgorithmCommand, IsAsync=True}"/>
            <Button Content="Pause Algorithm" Command="{Binding PauseAlgorithmCommand, IsAsync=True}"/>
            <Button Content="Resume Algorithm" Command="{Binding ResumeAlgorithmCommand, IsAsync=True}"/>
        </UniformGrid>-->
        <UniformGrid>
            <GroupBox Header="Control Parameter Names">
                <ListView ItemsSource="{Binding ControlParameterNames, IsAsync=True}" SelectedItem="{Binding SelectedControlParameterName, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </GroupBox>
            <GroupBox Header="Control Parameter">
                <ContentControl Content="{Binding ControlParameter, IsAsync=True}">
                    <ContentControl.Resources>
                        <DataTemplate DataType="{x:Type sys:Boolean}" >
                            <Controls:ToggleSwitchButton IsChecked="{Binding DataContext.ControlParameter, IsAsync=True, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" HorizontalAlignment="Center" Margin="5" Padding="5" Width="80"/>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type sys:Double}" >
                            <TextBox Text="{Binding DataContext.ControlParameter, IsAsync=True, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"/>
                        </DataTemplate>
                    </ContentControl.Resources>
                </ContentControl>
                <!--<TextBox Text="{Binding ControlParameter, IsAsync=True}"/>-->
            </GroupBox>
            <GroupBox Header="Control Output Names">
                <ListView ItemsSource="{Binding ControlOutputNames, IsAsync=True}" SelectedItem="{Binding SelectedControlOutputName, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </GroupBox>
            <GroupBox Header="Control Output">
                <Grid>
                    <ScrollViewer>
                        <ContentControl Content="{Binding ControlOutput, IsAsync=True}">
                            <ContentControl.Resources>
                                <DataTemplate DataType="{x:Type sys:Boolean}" >
                                    <Ellipse Fill="{Binding Path=., IsAsync=True, Converter={StaticResource BConverter}}" HorizontalAlignment="Center" Margin="5" Width="50" Height="50" Stroke="Black"/>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type sys:Nullable}" >
                                    <TextBox Text="{Binding Path=., IsAsync=True}"/>
                                </DataTemplate>
                            </ContentControl.Resources>
                        </ContentControl>
                    </ScrollViewer>
                </Grid>
            </GroupBox>
        </UniformGrid>
    </DockPanel>
</UserControl>
